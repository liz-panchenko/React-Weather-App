{"ast":null,"code":"var _jsxFileName = \"/Users/ielyzavetapanchenko/Documents/GitHub/React-Weather-App/src/Forecast.js\";\nimport React from \"react\";\nimport \"./Forecast.css\";\nimport ForecastIcon from \"./ForecastIcon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Forecast(_ref) {\n  let {\n    fUnits,\n    forecastResults\n  } = _ref;\n  console.log(forecastResults[0]); //   console.log(\"aaaaa\");\n  // let weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"];\n\n  function forecastDay() {\n    let forecastWeekday = new Date(forecastResults[0].dt * 1000);\n    let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    let day = days[forecastWeekday.getDay()];\n    return day;\n  }\n\n  function forecastTemp(forecastResults) {\n    //   let forecastCTemp = Math.round(searchResults.main.temp);\n    let forecastMaxCTemp = Math.round(forecastResults[0].temp.max);\n    let forecastMinCTemp = Math.round(forecastResults[0].temp.min);\n    let forecastMaxFTemp = Math.round(forecastMaxCTemp * 9 / 5 + 32);\n    let forecastMinFTemp = Math.round(forecastMinCTemp * 9 / 5 + 32);\n\n    if (fUnits) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [forecastMaxFTemp, \"/\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: forecastMinFTemp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), \"\\xB0F\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: forecastMaxCTemp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n    //   {weekdays.map(function(weekday, index){})}\n    _jsxDEV(\"div\", {\n      className: \"Forecast col-sm-4 col-md my-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card text-center weather-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-title\",\n            children: forecastDay()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-text\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"daily-temp card-CTemp\",\n              children: forecastTemp(forecastResults)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this)\n  );\n}\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/ielyzavetapanchenko/Documents/GitHub/React-Weather-App/src/Forecast.js"],"names":["React","ForecastIcon","Forecast","fUnits","forecastResults","console","log","forecastDay","forecastWeekday","Date","dt","days","day","getDay","forecastTemp","forecastMaxCTemp","Math","round","temp","max","forecastMinCTemp","min","forecastMaxFTemp","forecastMinFTemp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,eAAe,SAASC,QAAT,OAA+C;AAAA,MAA7B;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAA6B;AAC5DC,EAAAA,OAAO,CAACC,GAAR,CAAYF,eAAe,CAAC,CAAD,CAA3B,EAD4D,CAE5D;AACA;;AACA,WAASG,WAAT,GAAuB;AACxB,QAAIC,eAAe,GAAG,IAAIC,IAAJ,CAASL,eAAe,CAAC,CAAD,CAAf,CAAmBM,EAAnB,GAAwB,IAAjC,CAAtB;AACA,QAAIC,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAX;AACA,QAAIC,GAAG,GAAGD,IAAI,CAACH,eAAe,CAACK,MAAhB,EAAD,CAAd;AACA,WAAOD,GAAP;AACE;;AACD,WAASE,YAAT,CAAsBV,eAAtB,EAAuC;AACrC;AACA,QAAIW,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAWb,eAAe,CAAC,CAAD,CAAf,CAAmBc,IAAnB,CAAwBC,GAAnC,CAAvB;AACA,QAAIC,gBAAgB,GAAGJ,IAAI,CAACC,KAAL,CAAWb,eAAe,CAAC,CAAD,CAAf,CAAmBc,IAAnB,CAAwBG,GAAnC,CAAvB;AACA,QAAIC,gBAAgB,GAAGN,IAAI,CAACC,KAAL,CAAYF,gBAAgB,GAAG,CAApB,GAAyB,CAAzB,GAA6B,EAAxC,CAAvB;AACA,QAAIQ,gBAAgB,GAAGP,IAAI,CAACC,KAAL,CAAYG,gBAAgB,GAAG,CAApB,GAAyB,CAAzB,GAA6B,EAAxC,CAAvB;;AACA,QAAIjB,MAAJ,EAAY;AACV,0BACE;AAAA,gCACE;AAAA,qBAAOmB,gBAAP,oBAAyB;AAAA,sBAASC;AAAT;AAAA;AAAA;AAAA;AAAA,kBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAMD,KAPD,MAOO;AACL,0BACE;AAAA,gCACE;AAAA,oBAAOR;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAMD;AACF;;AACD;AAAA;AACE;AACA;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,sBAA6BR,WAAW;AAAxC;AAAA;AAAA;AAAA;AAAA,kBADF,eAGE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,mCACE;AAAM,cAAA,SAAS,EAAC,uBAAhB;AAAA,wBAAyCO,YAAY,CAACV,eAAD;AAArD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAcD;KA9CuBF,Q","sourcesContent":["import React from \"react\";\nimport \"./Forecast.css\";\nimport ForecastIcon from \"./ForecastIcon\";\n\nexport default function Forecast({ fUnits, forecastResults }) {\n  console.log(forecastResults[0]);\n  //   console.log(\"aaaaa\");\n  // let weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"];\n  function forecastDay() {\n let forecastWeekday = new Date(forecastResults[0].dt * 1000);\n let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n let day = days[forecastWeekday.getDay()];\n return day;\n  }\n  function forecastTemp(forecastResults) {\n    //   let forecastCTemp = Math.round(searchResults.main.temp);\n    let forecastMaxCTemp = Math.round(forecastResults[0].temp.max);\n    let forecastMinCTemp = Math.round(forecastResults[0].temp.min);\n    let forecastMaxFTemp = Math.round((forecastMaxCTemp * 9) / 5 + 32);\n    let forecastMinFTemp = Math.round((forecastMinCTemp * 9) / 5 + 32);\n    if (fUnits) {\n      return (\n        <span>\n          <span>{forecastMaxFTemp}/<strong>{forecastMinFTemp}</strong></span>\n          °F\n        </span>\n      );\n    } else {\n      return (\n        <div>\n          <span>{forecastMaxCTemp}</span>\n          °C\n        </div>\n      );\n    }\n  }\n  return (\n    //   {weekdays.map(function(weekday, index){})}\n    <div className=\"Forecast col-sm-4 col-md my-2\">\n      <div className=\"card text-center weather-card\">\n        <div className=\"card-body\">\n          <div className=\"card-title\">{forecastDay()}</div>\n          {/* <ForecastIcon /> */}\n          <div className=\"card-text\">\n            <span className=\"daily-temp card-CTemp\">{forecastTemp(forecastResults)}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}