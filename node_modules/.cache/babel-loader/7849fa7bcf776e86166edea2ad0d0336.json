{"ast":null,"code":"var _jsxFileName = \"/Users/ielyzavetapanchenko/Documents/GitHub/React-Weather-App/src/Forecast.js\";\nimport React from \"react\";\nimport \"./Forecast.css\";\nimport ClearSky from \"./images/1.clear_sky.png\";\nimport NightClearSky from \"./images/1n.clear_sky.png\";\nimport FewClouds from \"./images/2.few_clouds.png\";\nimport NightFewClouds from \"./images/2n.few_clouds.png\";\nimport Clouds from \"./images/3.4.clouds.png\";\nimport Rain from \"./images/09.10.rain.png\";\nimport Thunderstorm from \"./images/11.thunderstorm.png\";\nimport Snow from \"./images/13.snow.png\";\nimport Mist from \"./images/50.mist.png\";\nimport NightMist from \"./images/50n.mist.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Forecast(_ref) {\n  let {\n    fUnits,\n    forecastResults\n  } = _ref;\n\n  //   console.log(forecastIconCode);\n  //   console.log(\"aaaaa\");\n  // let weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"];\n  function forecastDay() {\n    let forecastWeekday = new Date(forecastResults[0].dt * 1000);\n    let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    let day = days[forecastWeekday.getDay()];\n    return day;\n  }\n\n  function forecastIcon() {\n    let forecastIconCode = iconCode.weather[0].icon;\n    let forecastIconObject = {\n      \"01d\": ClearSky,\n      \"01n\": NightClearSky,\n      \"02d\": FewClouds,\n      \"02n\": NightFewClouds,\n      \"03d\": Clouds,\n      \"03n\": Clouds,\n      \"04d\": Clouds,\n      \"04n\": Clouds,\n      \"09d\": Rain,\n      \"09n\": Rain,\n      \"10d\": Rain,\n      \"10n\": Rain,\n      \"11d\": Thunderstorm,\n      \"11n\": Thunderstorm,\n      \"13d\": Snow,\n      \"13n\": Snow,\n      \"50d\": Mist,\n      \"50n\": NightMist\n    };\n    console.log(iconCode);\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: forecastIconObject[forecastIconCode],\n      className: \"card-img img-fluid\",\n      alt: \"weather icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this);\n  }\n\n  function forecastTemp() {\n    let forecastMaxCTemp = Math.round(forecastResults[0].temp.max);\n    let forecastMinCTemp = Math.round(forecastResults[0].temp.min);\n    let forecastMaxFTemp = Math.round(forecastMaxCTemp * 9 / 5 + 32);\n    let forecastMinFTemp = Math.round(forecastMinCTemp * 9 / 5 + 32);\n\n    if (fUnits) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: forecastMaxFTemp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), \" | \", forecastMinFTemp]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), \"\\xB0F\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: forecastMaxCTemp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), \" | \", forecastMinCTemp]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Forecast col-sm-4 col-md my-2\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center weather-card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: forecastDay()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), forecastIcon(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-text\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"daily-temp card-CTemp\",\n            children: forecastTemp()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/ielyzavetapanchenko/Documents/GitHub/React-Weather-App/src/Forecast.js"],"names":["React","ClearSky","NightClearSky","FewClouds","NightFewClouds","Clouds","Rain","Thunderstorm","Snow","Mist","NightMist","Forecast","fUnits","forecastResults","forecastDay","forecastWeekday","Date","dt","days","day","getDay","forecastIcon","forecastIconCode","iconCode","weather","icon","forecastIconObject","console","log","forecastTemp","forecastMaxCTemp","Math","round","temp","max","forecastMinCTemp","min","forecastMaxFTemp","forecastMinFTemp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./Forecast.css\";\nimport ClearSky from \"./images/1.clear_sky.png\";\nimport NightClearSky from \"./images/1n.clear_sky.png\";\nimport FewClouds from \"./images/2.few_clouds.png\";\nimport NightFewClouds from \"./images/2n.few_clouds.png\";\nimport Clouds from \"./images/3.4.clouds.png\";\nimport Rain from \"./images/09.10.rain.png\";\nimport Thunderstorm from \"./images/11.thunderstorm.png\";\nimport Snow from \"./images/13.snow.png\";\nimport Mist from \"./images/50.mist.png\";\nimport NightMist from \"./images/50n.mist.png\";\n\n\nexport default function Forecast({ fUnits, forecastResults }) {\n//   console.log(forecastIconCode);\n  //   console.log(\"aaaaa\");\n  // let weekdays = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"];\n  function forecastDay() {\n let forecastWeekday = new Date(forecastResults[0].dt * 1000);\n let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n let day = days[forecastWeekday.getDay()];\n return day;\n  }\n  function forecastIcon() {\n let forecastIconCode = iconCode.weather[0].icon;\n let forecastIconObject = {\n   \"01d\": ClearSky,\n   \"01n\": NightClearSky,\n   \"02d\": FewClouds,\n   \"02n\": NightFewClouds,\n   \"03d\": Clouds,\n   \"03n\": Clouds,\n   \"04d\": Clouds,\n   \"04n\": Clouds,\n   \"09d\": Rain,\n   \"09n\": Rain,\n   \"10d\": Rain,\n   \"10n\": Rain,\n   \"11d\": Thunderstorm,\n   \"11n\": Thunderstorm,\n   \"13d\": Snow,\n   \"13n\": Snow,\n   \"50d\": Mist,\n   \"50n\": NightMist,\n };\n console.log(iconCode);\n return (\n   <img\n     src={forecastIconObject[forecastIconCode]}\n     className=\"card-img img-fluid\"\n     alt=\"weather icon\"\n   />\n );\n  }\n  function forecastTemp() {\n    let forecastMaxCTemp = Math.round(forecastResults[0].temp.max);\n    let forecastMinCTemp = Math.round(forecastResults[0].temp.min);\n    let forecastMaxFTemp = Math.round((forecastMaxCTemp * 9) / 5 + 32);\n    let forecastMinFTemp = Math.round((forecastMinCTemp * 9) / 5 + 32);\n    if (fUnits) {\n      return (\n        <span>\n          <span>\n            <strong>{forecastMaxFTemp}</strong> | {forecastMinFTemp}\n          </span>\n          °F\n        </span>\n      );\n    } else {\n      return (\n        <div>\n          <span>\n            <strong>{forecastMaxCTemp}</strong> | {forecastMinCTemp}\n          </span>\n          °C\n        </div>\n      );\n    }\n  }\n  return (\n    <div className=\"Forecast col-sm-4 col-md my-2\">\n      <div className=\"card text-center weather-card\">\n        <div className=\"card-body\">\n          <div className=\"card-title\">{forecastDay()}</div>\n          {forecastIcon()}\n          <div className=\"card-text\">\n            <span className=\"daily-temp card-CTemp\">{forecastTemp()}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}